pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Set Java 17 for Maven') {
      steps {
        withEnv([
          'JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64',
          'PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH'
        ]) {
          sh '''
            echo "Verifying Java version..."
            java -version
            mvn -version
          '''
        }
      }
    }
    stage('Build and Test') {
      steps {
        withEnv([
          'JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64',
          'PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH'
        ]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn clean package
          '''
        }
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://65.0.91.101:9000"
      }
      steps {
        withEnv([
          'JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64',
          'PATH=/usr/lib/jvm/java-17-openjdk-amd64/bin:$PATH'
        ]) {
          withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
            sh '''
              cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
              mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
            '''
          }
        }
      }
    }
  }
}
